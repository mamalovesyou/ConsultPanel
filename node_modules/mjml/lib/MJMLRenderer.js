'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Error = require('./Error');

var _jsBeautify = require('js-beautify');

var _htmlMinifier = require('html-minifier');

var _mjml = require('./helpers/mjml');

var _defaultContainer = require('./configs/defaultContainer');

var _defaultContainer2 = _interopRequireDefault(_defaultContainer);

var _documentParser = require('./documentParser');

var _documentParser2 = _interopRequireDefault(_documentParser);

var _dom = require('./helpers/dom');

var _dom2 = _interopRequireDefault(_dom);

var _post_render = require('./helpers/post_render');

var _getFontsImports = require('./helpers/getFontsImports');

var _getFontsImports2 = _interopRequireDefault(_getFontsImports);

var _MJMLElementsCollection = require('./MJMLElementsCollection');

var _MJMLElementsCollection2 = _interopRequireDefault(_MJMLElementsCollection);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

var _server2 = _interopRequireDefault(_server);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var debug = require('debug')('mjml-engine/mjml2html');

var MJMLRenderer = function () {
  function MJMLRenderer(content, options) {
    _classCallCheck(this, MJMLRenderer);

    this.content = content;
    this.options = options;

    if (typeof this.content == 'string') {
      this.parseDocument();
    }
  }

  _createClass(MJMLRenderer, [{
    key: 'parseDocument',
    value: function parseDocument() {
      debug('Start parsing document');
      this.content = (0, _documentParser2.default)(this.content);
      debug('Content parsed.');
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.content) {
        throw new _Error.EmptyMJMLError('.render: No MJML to render in options ' + this.options.toString());
      }

      var rootElemComponent = _react2.default.createElement(_MJMLElementsCollection2.default[this.content.tagName.substr(3)], { mjml: (0, _mjml.parseInstance)(this.content) });

      debug('Render to static markup');
      var renderedMJML = _server2.default.renderToStaticMarkup(rootElemComponent);

      debug('React rendering done. Continue with special overrides.');

      var MJMLDocument = (0, _defaultContainer2.default)({ title: this.options.title, content: renderedMJML, fonts: (0, _getFontsImports2.default)({ content: renderedMJML }) });

      return this._postRender(MJMLDocument);
    }
  }, {
    key: '_postRender',
    value: function _postRender(MJMLDocument) {
      var $ = _dom2.default.parseHTML(MJMLDocument);

      $ = (0, _post_render.insertColumnMediaQuery)(this.$);
      $ = (0, _post_render.fixLegacyAttrs)(this.$);
      $ = (0, _post_render.fixOutlookLayout)(this.$);
      $ = (0, _post_render.clean)(this.$);

      var finalMJMLDocument = _dom2.default.getHTML($);
      finalMJMLDocument = (0, _post_render.removeCDATA)(MJMLDocument);

      if (this.options.beautify && _jsBeautify.html) {
        finalMJMLDocument = (0, _jsBeautify.html)(finalMJMLDocument, {
          indent_size: 2,
          wrap_attributes_indent_size: 2
        });
      }

      if (this.options.minify && _htmlMinifier.minify) {
        finalMJMLDocument = (0, _htmlMinifier.minify)(finalMJMLDocument, {
          collapseWhitespace: true,
          removeEmptyAttributes: true,
          minifyCSS: true
        });
      }

      return finalMJMLDocument;
    }
  }]);

  return MJMLRenderer;
}();

exports.default = MJMLRenderer;
//# sourceMappingURL=MJMLRenderer.js.map
